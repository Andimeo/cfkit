Codeforces Round 713 (Div. 3)


A. Spy Detected!
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given an array $$$a$$$ consisting of $$$n$$$ ($$$n \ge 3$$$) positive integers. It is known that in this array, all the numbers except one are the same (for example, in the array $$$[4, 11, 4, 4]$$$ all numbers except one are equal to $$$4$$$).
Print the index of the element that does not equal others. The numbers in the array are numbered from one.
Input
The first line contains a single integer $$$t$$$ ($$$1 \le t \le 100$$$). Then $$$t$$$ test cases follow.
The first line of each test case contains a single integer $$$n$$$ ($$$3 \le n \le 100$$$) — the length of the array $$$a$$$.
The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 100$$$).
It is guaranteed that all the numbers except one in the $$$a$$$ array are the same.
Output
For each test case, output a single integer — the index of the element that is not equal to others.
Example
Input
4
4
11 13 11 11
5
1 4 4 4 4
10
3 3 3 3 10 3 3 3 3 3
3
20 20 10
Output
2
1
5
3
----------------------------------------------------------------------------------------------------
B. Almost Rectangle
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
There is a square field of size $$$n \times n$$$ in which two cells are marked. These cells can be in the same row or column.
You are to mark two more cells so that they are the corners of a rectangle with sides parallel to the coordinate axes.
For example, if $$$n=4$$$ and a rectangular field looks like this (there are asterisks in the marked cells):
$$$$$$ \begin{matrix} . & . & * & . \\ . & . & . & . \\ * & . & . & . \\ . & . & . & . \\ \end{matrix} $$$$$$
Then you can mark two more cells as follows
$$$$$$ \begin{matrix} * & . & * & . \\ . & . & . & . \\ * & . & * & . \\ . & . & . & . \\ \end{matrix} $$$$$$
If there are several possible solutions, then print any of them.
Input
The first line contains a single integer $$$t$$$ ($$$1 \le t \le 400$$$). Then $$$t$$$ test cases follow.
The first row of each test case contains a single integer $$$n$$$ ($$$2 \le n \le 400$$$) — the number of rows and columns in the table.
The following $$$n$$$ lines each contain $$$n$$$ characters '
.
' or '
*
' denoting empty and marked cells, respectively.
It is guaranteed that the sums of $$$n$$$ for all test cases do not exceed $$$400$$$.
It is guaranteed that there are exactly two asterisks on the field. They can be in the same row/column.
It is guaranteed that the solution exists.
Output
For each test case, output $$$n$$$ rows of $$$n$$$ characters — a field with four asterisks marked corresponding to the statements. If there multiple correct answers, print any of them.
Example
Input
6
4
..*.
....
*...
....
2
*.
.*
2
.*
.*
3
*.*
...
...
5
.....
..*..
.....
.*...
.....
4
....
....
*...
*...
Output
*.*.
....
*.*.
....
**
**
**
**
*.*
*.*
...
.....
.**..
.....
.**..
.....
....
....
**..
**..
----------------------------------------------------------------------------------------------------
C. A-B Palindrome
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given a string $$$s$$$ consisting of the characters '
0
', '
1
', and '
?
'. You need to replace all the characters with '
?
' in the string $$$s$$$ by '
0
' or '
1
' so that the string becomes a palindrome and has
exactly
$$$a$$$ characters '
0
' and
exactly
$$$b$$$ characters '
1
'. Note that each of the characters '
?
' is replaced
independently
from the others.
A string $$$t$$$ of length $$$n$$$ is called a palindrome if the equality $$$t[i] = t[n-i+1]$$$ is true for all $$$i$$$ ($$$1 \le i \le n$$$).
For example, if $$$s=$$$"
01?????0
", $$$a=4$$$ and $$$b=4$$$, then you can replace the characters '
?
' in the following ways:
"
01011010
";
"
01100110
".
For the given string $$$s$$$ and the numbers $$$a$$$ and $$$b$$$, replace all the characters with '
?
' in the string $$$s$$$ by '
0
' or '
1
' so that the string becomes a palindrome and has
exactly
$$$a$$$ characters '
0
' and
exactly
$$$b$$$ characters '
1
'.
Input
The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$). Then $$$t$$$ test cases follow.
The first line of each test case contains two integers $$$a$$$ and $$$b$$$ ($$$0 \le a, b \le 2 \cdot 10^5$$$, $$$a + b \ge 1$$$).
The second line of each test case contains the string $$$s$$$ of length $$$a+b$$$, consisting of the characters '
0
', '
1
', and '
?
'.
It is guaranteed that the sum of the string lengths of $$$s$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.
Output
For each test case, output:
"
-1
", if you can't replace all the characters '
?
' in the string $$$s$$$ by '
0
' or '
1
' so that the string becomes a palindrome and that it contains
exactly
$$$a$$$ characters '
0
' and
exactly
$$$b$$$ characters '
1
';
the string that is obtained as a result of the replacement, otherwise.
If there are several suitable ways to replace characters, you can output any.
Example
Input
9
4 4
01?????0
3 3
??????
1 0
?
2 2
0101
2 2
01?0
0 1
0
0 3
1?1
2 2
?00?
4 3
??010?0
Output
01011010
-1
0
-1
0110
-1
111
1001
0101010
----------------------------------------------------------------------------------------------------
D. Corrupted Array
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given a number $$$n$$$ and an array $$$b_1, b_2, \ldots, b_{n+2}$$$, obtained according to the following algorithm:
some array $$$a_1, a_2, \ldots, a_n$$$ was guessed;
array $$$a$$$ was written to array $$$b$$$, i.e. $$$b_i = a_i$$$ ($$$1 \le i \le n$$$);
The $$$(n+1)$$$-th element of the array $$$b$$$ is the sum of the numbers in the array $$$a$$$, i.e. $$$b_{n+1} = a_1+a_2+\ldots+a_n$$$;
The $$$(n+2)$$$-th element of the array $$$b$$$ was written some number $$$x$$$ ($$$1 \le x \le 10^9$$$), i.e. $$$b_{n+2} = x$$$; The
array $$$b$$$ was shuffled.
For example, the array $$$b=[2, 3, 7, 12 ,2]$$$ it could be obtained in the following ways:
$$$a=[2, 2, 3]$$$ and $$$x=12$$$;
$$$a=[3, 2, 7]$$$ and $$$x=2$$$.
For the given array $$$b$$$, find any array $$$a$$$ that could have been guessed initially.
Input
The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$). Then $$$t$$$ test cases follow.
The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$).
The second row of each test case contains $$$n+2$$$ integers $$$b_1, b_2, \ldots, b_{n+2}$$$ ($$$1 \le b_i \le 10^9$$$).
It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.
Output
For each test case, output:
"
-1
", if the array $$$b$$$ could not be obtained from any array $$$a$$$;
$$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$, otherwise.
If there are several arrays of $$$a$$$, you can output any.
Example
Input
4
3
2 3 7 12 2
4
9 1 7 1 6 5
5
18 2 2 3 2 9 2
3
2 6 9 2 1
Output
2 3 7 
-1
2 2 2 3 9 
1 2 6
----------------------------------------------------------------------------------------------------
E. Permutation by Sum
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
A permutation is a sequence of $$$n$$$ integers from $$$1$$$ to $$$n$$$, in which all the numbers occur exactly once. For example, $$$[1]$$$, $$$[3, 5, 2, 1, 4]$$$, $$$[1, 3, 2]$$$ are permutations, and $$$[2, 3, 2]$$$, $$$[4, 3, 1]$$$, $$$[0]$$$ are not.
Polycarp was given four integers $$$n$$$, $$$l$$$, $$$r$$$ ($$$1 \le l \le r \le n)$$$ and $$$s$$$ ($$$1 \le s \le \frac{n (n+1)}{2}$$$) and asked to find a permutation $$$p$$$ of numbers from $$$1$$$ to $$$n$$$ that satisfies the following condition:
$$$s = p_l + p_{l+1} + \ldots + p_r$$$.
For example, for $$$n=5$$$, $$$l=3$$$, $$$r=5$$$, and $$$s=8$$$, the following permutations are suitable (not all options are listed):
$$$p = [3, 4, 5, 2, 1]$$$;
$$$p = [5, 2, 4, 3, 1]$$$;
$$$p = [5, 2, 1, 3, 4]$$$.
But, for example, there is no permutation suitable for the condition above for $$$n=4$$$, $$$l=1$$$, $$$r=1$$$, and $$$s=5$$$.
Help Polycarp, for the given $$$n$$$, $$$l$$$, $$$r$$$, and $$$s$$$, find a permutation of numbers from $$$1$$$ to $$$n$$$ that fits the condition above. If there are several suitable permutations, print any of them.
Input
The first line contains a single integer $$$t$$$ ($$$1 \le t \le 500$$$). Then $$$t$$$ test cases follow.
Each test case consist of one line with four integers $$$n$$$ ($$$1 \le n \le 500$$$), $$$l$$$ ($$$1 \le l \le n$$$), $$$r$$$ ($$$l \le r \le n$$$), $$$s$$$ ($$$1 \le s \le \frac{n (n+1)}{2}$$$).
It is guaranteed that the sum of $$$n$$$ for all input data sets does not exceed $$$500$$$.
Output
For each test case, output on a separate line:
$$$n$$$ integers — a permutation of length $$$n$$$ that fits the condition above if such a permutation exists;
-1
, otherwise.
If there are several suitable permutations, print any of them.
Example
Input
5
5 2 3 5
5 3 4 1
3 1 2 4
2 2 2 2
2 1 1 3
Output
1 2 3 4 5 
-1
1 3 2 
1 2 
-1
----------------------------------------------------------------------------------------------------
F. Education
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
Polycarp is wondering about buying a new computer, which costs $$$c$$$ tugriks. To do this, he wants to get a job as a programmer in a big company.
There are $$$n$$$ positions in Polycarp's company, numbered starting from one. An employee in position $$$i$$$ earns $$$a[i]$$$ tugriks every day. The higher the position number, the more tugriks the employee receives. Initially, Polycarp gets a position with the number $$$1$$$ and has $$$0$$$ tugriks.
Each day Polycarp can do one of two things:
If Polycarp is in the position of $$$x$$$, then he can earn $$$a[x]$$$ tugriks.
If Polycarp is in the position of $$$x$$$ ($$$x < n$$$) and has at least $$$b[x]$$$ tugriks, then he can spend $$$b[x]$$$ tugriks on an online course and move to the position $$$x+1$$$.
For example, if $$$n=4$$$, $$$c=15$$$, $$$a=[1, 3, 10, 11]$$$, $$$b=[1, 2, 7]$$$, then Polycarp can act like this:
On the first day, Polycarp is in the $$$1$$$-st position and earns $$$1$$$ tugrik. Now he has $$$1$$$ tugrik;
On the second day, Polycarp is in the $$$1$$$-st position and move to the $$$2$$$-nd position. Now he has $$$0$$$ tugriks;
On the third day, Polycarp is in the $$$2$$$-nd position and earns $$$3$$$ tugriks. Now he has $$$3$$$ tugriks;
On the fourth day, Polycarp is in the $$$2$$$-nd position and is transferred to the $$$3$$$-rd position. Now he has $$$1$$$ tugriks;
On the fifth day, Polycarp is in the $$$3$$$-rd position and earns $$$10$$$ tugriks. Now he has $$$11$$$ tugriks;
On the sixth day, Polycarp is in the $$$3$$$-rd position and earns $$$10$$$ tugriks. Now he has $$$21$$$ tugriks;
Six days later, Polycarp can buy himself a new computer.
Find the minimum number of days after which Polycarp will be able to buy himself a new computer.
Input
The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$). Then $$$t$$$ test cases follow.
The first line of each test case contains two integers $$$n$$$ and $$$c$$$ ($$$2 \le n \le 2 \cdot 10^5$$$, $$$1 \le c \le 10^9$$$) — the number of positions in the company and the cost of a new computer.
The second line of each test case contains $$$n$$$ integers $$$a_1 \le a_2 \le \ldots \le a_n$$$ ($$$1 \le a_i \le 10^9$$$).
The third line of each test case contains $$$n - 1$$$ integer $$$b_1, b_2, \ldots, b_{n-1}$$$ ($$$1 \le b_i \le 10^9$$$).
It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.
Output
For each test case, output the minimum number of days after which Polycarp will be able to buy a new computer.
Example
Input
3
4 15
1 3 10 11
1 2 7
4 100
1 5 10 50
3 14 12
2 1000000000
1 1
1
Output
6
13
1000000000
----------------------------------------------------------------------------------------------------
G. Short Task
time limit per test
2 seconds
memory limit per test
512 megabytes
input
standard input
output
standard output
Let us denote by $$$d(n)$$$ the sum of all divisors of the number $$$n$$$, i.e. $$$d(n) = \sum\limits_{k | n} k$$$.
For example, $$$d(1) = 1$$$, $$$d(4) = 1+2+4=7$$$, $$$d(6) = 1+2+3+6=12$$$.
For a given number $$$c$$$, find the minimum $$$n$$$ such that $$$d(n) = c$$$.
Input
The first line contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$). Then $$$t$$$ test cases follow.
Each test case is characterized by one integer $$$c$$$ ($$$1 \le c \le 10^7$$$).
Output
For each test case, output:
"
-1
" if there is no such $$$n$$$ that $$$d(n) = c$$$;
$$$n$$$, otherwise.
Example
Input
12
1
2
3
4
5
6
7
8
9
10
39
691
Output
1
-1
2
3
-1
5
4
7
-1
-1
18
-1
----------------------------------------------------------------------------------------------------
