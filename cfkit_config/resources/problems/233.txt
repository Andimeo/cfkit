Codeforces Round 144 (Div. 2)


A. Perfect Permutation
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
A
permutation
is a sequence of integers
p
1
,
p
2
, ...,
p
n
, consisting of
n
distinct positive integers, each of them doesn't exceed
n
. Let's denote the
i
-th element of permutation
p
as
p
i
. We'll call number
n
the size of permutation
p
1
,
p
2
, ...,
p
n
.
Nickolas adores permutations. He likes some permutations more than the others. He calls such permutations perfect. A
perfect
permutation is such permutation
p
that for any
i
(1 ≤
i
≤
n
)
(
n
is the permutation size) the following equations hold
p
p
i
=
i
and
p
i
≠
i
. Nickolas asks you to print any perfect permutation of size
n
for the given
n
.
Input
A single line contains a single integer
n
(
1 ≤
n
≤ 100
) — the permutation size.
Output
If a perfect permutation of size
n
doesn't exist, print a single integer -1. Otherwise print
n
distinct integers from 1 to
n
,
p
1
,
p
2
, ...,
p
n
— permutation
p
, that is perfect. Separate printed numbers by whitespaces.
Examples
Input
1
Output
-1
Input
2
Output
2 1
Input
4
Output
2 1 4 3
----------------------------------------------------------------------------------------------------
B. Non-square Equation
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
Let's consider equation:
x
2
+
s
(
x
)·
x
-
n
= 0,
where
x
,
n
are positive integers,
s
(
x
)
is the function, equal to the sum of digits of number
x
in the decimal number system.
You are given an integer
n
, find the smallest positive integer root of equation
x
, or else determine that there are no such roots.
Input
A single line contains integer
n
(1 ≤
n
≤ 10
18
)
— the equation parameter.
Please, do not use the
%lld
specifier to read or write 64-bit integers in С++. It is preferred to use
cin
,
cout
streams or the
%I64d
specifier.
Output
Print -1, if the equation doesn't have integer positive roots. Otherwise print such smallest integer
x
(
x
> 0)
, that the equation given in the statement holds.
Examples
Input
2
Output
1
Input
110
Output
10
Input
4
Output
-1
----------------------------------------------------------------------------------------------------
C. Cycles
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
John Doe started thinking about graphs. After some thought he decided that he wants to paint an undirected graph, containing exactly
k
cycles of length
3
.
A cycle of length
3
is an unordered group of three distinct graph vertices
a
,
b
and
c
, such that each pair of them is connected by a graph edge.
John has been painting for long, but he has not been a success. Help him find such graph. Note that the number of vertices there shouldn't exceed
100
, or else John will have problems painting it.
Input
A single line contains an integer
k
(
1 ≤
k
≤ 10
5
) — the number of cycles of length
3
in the required graph.
Output
In the first line print integer
n
(
3 ≤
n
≤ 100
) — the number of vertices in the found graph. In each of next
n
lines print
n
characters "
0
" and "
1
": the
i
-th character of the
j
-th line should equal "
0
", if vertices
i
and
j
do not have an edge between them, otherwise it should equal "
1
". Note that as the required graph is undirected, the
i
-th character of the
j
-th line must equal the
j
-th character of the
i
-th line. The graph shouldn't contain self-loops, so the
i
-th character of the
i
-th line must equal "
0
" for all
i
.
Examples
Input
1
Output
3
011
101
110
Input
10
Output
5
01111
10111
11011
11101
11110
----------------------------------------------------------------------------------------------------
D. Table
time limit per test
4 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
John Doe has an
n
×
m
table. John Doe can paint points in some table cells, not more than one point in one table cell. John Doe wants to use such operations to make each square subtable of size
n
×
n
have exactly
k
points.
John Doe wondered, how many distinct ways to fill the table with points are there, provided that the condition must hold. As this number can be rather large, John Doe asks to find its remainder after dividing by
1000000007
(10
9
+ 7)
.
You should assume that John always paints a point exactly in the center of some cell. Two ways to fill a table are considered distinct, if there exists a table cell, that has a point in one way and doesn't have it in the other.
Input
A single line contains space-separated integers
n
,
m
,
k
(
1 ≤
n
≤ 100;
n
≤
m
≤ 10
18
; 0 ≤
k
≤
n
2
) — the number of rows of the table, the number of columns of the table and the number of points each square must contain.
Please, do not use the
%lld
specifier to read or write 64-bit integers in С++. It is preferred to use the
cin
,
cout
streams or the
%I64d
specifier.
Output
In a single line print a single integer — the remainder from dividing the described number of ways by
1000000007
(10
9
+ 7)
.
Examples
Input
5 6 1
Output
45
----------------------------------------------------------------------------------------------------
E. Doe Graphs
time limit per test
3 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
John Doe decided that some mathematical object must be named after him. So he invented the Doe graphs. The Doe graphs are a family of undirected graphs, each of them is characterized by a single non-negative number — its order.
We'll denote a graph of order
k
as
D
(
k
)
, and we'll denote the number of vertices in the graph
D
(
k
)
as
|
D
(
k
)|
. Then let's define the Doe graphs as follows:
D
(0)
consists of a single vertex, that has number
1
.
D
(1)
consists of two vertices with numbers
1
and
2
, connected by an edge.
D
(
n
)
for
n
≥ 2
is obtained from graphs
D
(
n
- 1)
and
D
(
n
- 2)
.
D
(
n
- 1)
and
D
(
n
- 2)
are joined in one graph, at that numbers of all vertices of graph
D
(
n
- 2)
increase by
|
D
(
n
- 1)|
(for example, vertex number
1
of graph
D
(
n
- 2)
becomes vertex number
1 + |
D
(
n
- 1)|
). After that two edges are added to the graph: the first one goes between vertices with numbers
|
D
(
n
- 1)|
and
|
D
(
n
- 1)| + 1
, the second one goes between vertices with numbers
|
D
(
n
- 1)| + 1
and
1
. Note that the definition of graph
D
(
n
)
implies, that
D
(
n
)
is a connected graph, its vertices are numbered from
1
to
|
D
(
n
)|
.
The picture shows the Doe graphs of order 1, 2, 3 and 4, from left to right.
John thinks that Doe graphs are that great because for them exists a polynomial algorithm for the search of Hamiltonian path. However, your task is to answer queries of finding the shortest-length path between the vertices
a
i
and
b
i
in the graph
D
(
n
)
.
A path between a pair of vertices
u
and
v
in the graph is a sequence of vertices
x
1
,
x
2
,
...
,
x
k
(
k
> 1)
such, that
x
1
=
u
,
x
k
=
v
, and for any
i
(
i
<
k
)
vertices
x
i
and
x
i
+ 1
are connected by a graph edge. The length of path
x
1
,
x
2
,
...
,
x
k
is number
(
k
- 1)
.
Input
The first line contains two integers
t
and
n
(
1 ≤
t
≤ 10
5
; 1 ≤
n
≤ 10
3
) — the number of queries and the order of the given graph. The
i
-th of the next
t
lines contains two integers
a
i
and
b
i
(
1 ≤
a
i
,
b
i
≤ 10
16
,
a
i
≠
b
i
) — numbers of two vertices in the
i
-th query. It is guaranteed that
a
i
,
b
i
≤ |
D
(
n
)|
.
Please, do not use the
%lld
specifier to read or write 64-bit integers in С++. It is preferred to use
cin
,
cout
streams or the
%I64d
specifier.
Output
For each query print a single integer on a single line — the length of the shortest path between vertices
a
i
and
b
i
. Print the answers to the queries in the order, in which the queries are given in the input.
Examples
Input
10 5
1 2
1 3
1 4
1 5
2 3
2 4
2 5
3 4
3 5
4 5
Output
1
1
1
2
1
2
3
1
2
1
----------------------------------------------------------------------------------------------------
