CodeTON Round 6 (Div. 1 + Div. 2, Rated, Prizes!)


A. MEXanized Array
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given three non-negative integers $$$n$$$, $$$k$$$, and $$$x$$$. Find the maximum possible sum of elements in an array consisting of non-negative integers, which has $$$n$$$ elements, its MEX is equal to $$$k$$$, and all its elements do not exceed $$$x$$$. If such an array does not exist, output $$$-1$$$.
The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:
The MEX of $$$[2,2,1]$$$ is $$$0$$$, because $$$0$$$ does not belong to the array.
The MEX of $$$[3,1,0,1]$$$ is $$$2$$$, because $$$0$$$ and $$$1$$$ belong to the array, but $$$2$$$ does not.
The MEX of $$$[0,3,1,2]$$$ is $$$4$$$, because $$$0$$$, $$$1$$$, $$$2$$$ and $$$3$$$ belong to the array, but $$$4$$$ does not.
Input
The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. Then follows the description of the test cases.
The only line of each test case contains three integers $$$n$$$, $$$k$$$, and $$$x$$$ ($$$1 \leq n, k, x \leq 200$$$).
Output
For each test case, output a single number — the maximum sum of elements in a valid array, or $$$-1$$$, if such an array does not exist.
Example
Input
9
5 3 3
4 7 5
4 2 28
12 10 6
57 51 122
200 1 200
2 2 1
3 2 1
4 7 10
Output
7
-1
57
-1
2007
39800
1
2
-1
----------------------------------------------------------------------------------------------------
B. Friendly Arrays
time limit per test
2 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given two arrays of integers — $$$a_1, \ldots, a_n$$$ of length $$$n$$$, and $$$b_1, \ldots, b_m$$$ of length $$$m$$$. You can choose any element $$$b_j$$$ from array $$$b$$$ ($$$1 \leq j \leq m$$$), and for
all
$$$1 \leq i \leq n$$$ perform $$$a_i = a_i | b_j$$$. You can perform any number of such operations.
After all the operations, the value of $$$x = a_1 \oplus a_2 \oplus \ldots \oplus a_n$$$ will be calculated. Find the minimum and maximum values of $$$x$$$ that could be obtained after performing any set of operations.
Above, $$$|$$$ is the
bitwise OR operation
, and $$$\oplus$$$ is the
bitwise XOR operation
.
Input
The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. This is followed by the description of the test cases.
The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \leq n, m \leq 2 \cdot 10^5$$$) — the sizes of arrays $$$a$$$ and $$$b$$$.
The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \leq a_i \leq 10^9$$$) — the array $$$a$$$.
The third line of each test case contains $$$m$$$ integers $$$b_1, b_2, \ldots, b_m$$$ ($$$0 \leq b_i \leq 10^9$$$) — the array $$$b$$$.
It is guaranteed that the sum of values of $$$n$$$ and $$$m$$$ across all test cases does not exceed $$$2 \cdot 10^5$$$.
Output
For each test case, output $$$2$$$ numbers: the minimum and maximum possible values of $$$x$$$ after performing any set of operations.
Example
Input
2
2 3
0 1
1 2 3
3 1
1 1 2
1
Output
0 1
2 3
----------------------------------------------------------------------------------------------------
C. Colorful Table
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given two integers $$$n$$$ and $$$k$$$. You are also given an array of integers $$$a_1, a_2, \ldots, a_n$$$ of size $$$n$$$. It is known that for all $$$1 \leq i \leq n$$$, $$$1 \leq a_i \leq k$$$.
Define a two-dimensional array $$$b$$$ of size $$$n \times n$$$ as follows: $$$b_{i, j} = \min(a_i, a_j)$$$. Represent array $$$b$$$ as a square, where the upper left cell is $$$b_{1, 1}$$$, rows are numbered from top to bottom from $$$1$$$ to $$$n$$$, and columns are numbered from left to right from $$$1$$$ to $$$n$$$. Let the color of a cell be the number written in it (for a cell with coordinates $$$(i, j)$$$, this is $$$b_{i, j}$$$).
For each color from $$$1$$$ to $$$k$$$, find the smallest rectangle in the array $$$b$$$ containing all cells of this color. Output the sum of width and height of this rectangle.
Input
The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. Then follows the description of the test cases.
The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \leq n, k \leq 10^5$$$) — the size of array $$$a$$$ and the number of colors.
The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \leq a_i \leq k$$$) — the array $$$a$$$.
It is guaranteed that the sum of the values of $$$n$$$ and $$$k$$$ over all test cases does not exceed $$$10^5$$$.
Output
For each test case, output $$$k$$$ numbers: the sums of width and height of the smallest rectangle containing all cells of a color, for each color from $$$1$$$ to $$$k$$$.
Example
Input
5
2 1
1 1
2 2
1 2
3 5
3 2 4
4 2
1 2 1 2
5 3
1 2 3 2 1
Output
4 
4 2 
0 6 6 2 0 
8 6 
10 6 2
----------------------------------------------------------------------------------------------------
D. Prefix Purchase
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
You have an array $$$a$$$ of size $$$n$$$, initially filled with zeros ($$$a_1 = a_2 = \ldots = a_n = 0$$$). You also have an array of integers $$$c$$$ of size $$$n$$$.
Initially, you have $$$k$$$ coins. By paying $$$c_i$$$ coins, you can add $$$1$$$ to all elements of the array $$$a$$$ from the first to the $$$i$$$-th element ($$$a_j \mathrel{+}= 1$$$ for all $$$1 \leq j \leq i$$$). You can buy any $$$c_i$$$ any number of times. A purchase is only possible if $$$k \geq c_i$$$, meaning that at any moment $$$k \geq 0$$$ must hold true.
Find the lexicographically largest array $$$a$$$ that can be obtained.
An array $$$a$$$ is lexicographically smaller than an array $$$b$$$ of the same length if and only if in the first position where $$$a$$$ and $$$b$$$ differ, the element in array $$$a$$$ is smaller than the corresponding element in $$$b$$$.
Input
The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. This is followed by a description of the test cases.
The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) — the size of arrays $$$a$$$ and $$$c$$$.
The second line of each test case contains $$$n$$$ integers $$$c_1, c_2, \ldots, c_n$$$ ($$$1 \leq c_i \leq 10^9$$$) — the array $$$c$$$.
The third line of each test case contains a single integer $$$k$$$ ($$$1 \leq k \leq 10^9$$$) — the number of coins you have.
It is guaranteed that the sum of all $$$n$$$ values across all test cases does not exceed $$$2 \cdot 10^5$$$.
Output
For each test case, output $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ — the lexicographically largest array $$$a$$$ that can be obtained.
Example
Input
4
3
1 2 3
5
2
3 4
7
3
3 2 1
2
6
10 6 4 6 3 4
7
Output
5 0 0 
2 1 
2 2 2 
2 2 2 2 2 1
----------------------------------------------------------------------------------------------------
E. Another MEX Problem
time limit per test
1 second
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given an array of integers $$$a$$$ of size $$$n$$$. You can choose a set of non-overlapping subarrays of the given array (note that some elements may be not included in any subarray, this is allowed). For each selected subarray, calculate the MEX of its elements, and then calculate the
bitwise XOR
of all the obtained MEX values. What is the maximum bitwise XOR that can be obtained?
The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:
The MEX of $$$[2,2,1]$$$ is $$$0$$$, because $$$0$$$ does not belong to the array.
The MEX of $$$[3,1,0,1]$$$ is $$$2$$$, because $$$0$$$ and $$$1$$$ belong to the array, but $$$2$$$ does not.
The MEX of $$$[0,3,1,2]$$$ is $$$4$$$, because $$$0$$$, $$$1$$$, $$$2$$$ and $$$3$$$ belong to the array, but $$$4$$$ does not.
Input
The first line contains an integer $$$t$$$ ($$$1 \leq t \leq 5000$$$) — the number of test cases. This is followed by the description of the test cases.
The first line of each test case contains an integer $$$n$$$ ($$$1 \leq n \leq 5000$$$) — the size of the array $$$a$$$.
The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \leq a_i \leq n$$$) — the array $$$a$$$.
It is guaranteed that the sum of all $$$n$$$ values across all test cases does not exceed $$$5000$$$.
Output
For each test case, output a single number — the maximum possible XOR of the MEX values of the selected subarrays.
Example
Input
4
2
1 0
10
1 2 0 7 1 2 0 2 4 3
10
2 1 0 7 1 2 0 2 4 3
3
1 2 1
Output
2
6
7
0
----------------------------------------------------------------------------------------------------
F. Lazy Numbers
time limit per test
3 seconds
memory limit per test
256 megabytes
input
standard input
output
standard output
You are given positive integers $$$n$$$ and $$$k$$$. For each number from $$$1$$$ to $$$n$$$, we write its representation in the number system with base $$$k$$$ (without leading zeros) and then sort the resulting array in lexicographic order as strings. In the sorted array, we number the elements from $$$1$$$ to $$$n$$$ (i.e., indexing starts from $$$1$$$). Find the number of values $$$i$$$ such that the representation of number $$$i$$$ is at the $$$i$$$-th position in the sorted array of representations.
Examples of representations: $$$1$$$ in any number system is equal to $$$1$$$, $$$7$$$ with $$$k = 3$$$ is written as $$$21$$$, and $$$81$$$ with $$$k = 9$$$ is written as $$$100$$$.
Input
The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^3$$$) — the number of test cases. This is followed by a description of the test cases.
The only line of each test case contains integers $$$n$$$ and $$$k$$$ ($$$1 \leq n \leq 10^{18}$$$, $$$2 \leq k \leq 10^{18}$$$).
Output
For each test case, output a single integer — the number of values $$$1 \leq i \leq n$$$ such that the representation of number $$$i$$$ in the number system with base $$$k$$$ is at the $$$i$$$-th position after sorting.
Example
Input
8
2 2
4 2
6 4
33 2
532 13
780011804570805480 3788
366364720306464627 4702032149561577
293940402103595405 2
Output
2
2
1
3
1
3789
1
7
----------------------------------------------------------------------------------------------------
G. MEXanization
time limit per test
2 seconds
memory limit per test
512 megabytes
input
standard input
output
standard output
Let's define $$$f(S)$$$. Let $$$S$$$ be a multiset (i.e., it can contain repeated elements) of non-negative integers. In one operation, you can choose any non-empty subset of $$$S$$$ (which can also contain repeated elements), remove this subset (all elements in it) from $$$S$$$, and add the MEX of the removed subset to $$$S$$$. You can perform any number of such operations. After all the operations, $$$S$$$ should contain exactly $$$1$$$ number. $$$f(S)$$$ is the largest number that could remain in $$$S$$$ after any sequence of operations.
You are given an array of non-negative integers $$$a$$$ of length $$$n$$$. For each of its $$$n$$$ prefixes, calculate $$$f(S)$$$ if $$$S$$$ is the corresponding prefix (for the $$$i$$$-th prefix, $$$S$$$ consists of the first $$$i$$$ elements of array $$$a$$$).
The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:
The MEX of $$$[2,2,1]$$$ is $$$0$$$, because $$$0$$$ does not belong to the array.
The MEX of $$$[3,1,0,1]$$$ is $$$2$$$, because $$$0$$$ and $$$1$$$ belong to the array, but $$$2$$$ does not.
The MEX of $$$[0,3,1,2]$$$ is $$$4$$$, because $$$0$$$, $$$1$$$, $$$2$$$ and $$$3$$$ belong to the array, but $$$4$$$ does not.
Input
The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. Then follows the description of the test cases.
The first line of each test case contains an integer $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) — the size of array $$$a$$$.
The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \leq a_i \leq 2 \cdot 10^5$$$) — the array $$$a$$$.
It is guaranteed that the sum of all $$$n$$$ values across all test cases does not exceed $$$2 \cdot 10^5$$$.
Output
For each test case, output $$$n$$$ numbers: $$$f(S)$$$ for each of the $$$n$$$ prefixes of array $$$a$$$.
Example
Input
4
8
179 57 2 0 2 3 2 3
1
0
3
1 0 3
8
1 0 1 2 4 3 0 2
Output
179 2 3 3 3 4 4 5 
1 
1 2 2 
1 2 2 3 3 5 5 5
----------------------------------------------------------------------------------------------------
H. Standard Graph Problem
time limit per test
2 seconds
memory limit per test
512 megabytes
input
standard input
output
standard output
You are given a weighted directed graph with $$$n$$$ vertices and $$$m$$$ edges. Each vertex in the graph can be either highlighted or normal. Initially, all vertices are normal. The cost of the graph is defined as the minimum sum of edge weights that need to be selected so that from each normal vertex one can reach at least one highlighted vertex using the selected edges only. If it is not possible to select the edges, the cost is $$$-1$$$ instead.
Your task is to compute the cost of the graph after each of the $$$q$$$ queries. The queries can be of two types:
$$$+\;v_i$$$ makes vertex $$$v_i$$$ highlighted; it is guaranteed that the vertex is normal before the query.
$$$-\;v_i$$$ makes vertex $$$v_i$$$ normal; it is guaranteed that the vertex is highlighted before the query.
Output the cost of the graph after each of the $$$q$$$ queries.
Input
The first line contains three integers $$$n$$$, $$$m$$$, and $$$q$$$ ($$$3 \le n \le 2 \cdot 10^5, 1 \le m, q \le 2 \cdot 10^5$$$) — the number of vertices in the graph, the number of edges, and the number of queries.
The next $$$m$$$ lines contain the edges of the graph, one edge per line. The $$$i$$$-th line contains three integers $$$u_i$$$, $$$v_i$$$, and $$$c_i$$$ ($$$1 \leq u_i, v_i \leq n, u_i \ne v_i, 1 \leq c_i \leq 10^6$$$) — the endpoints of the $$$i$$$-th edge (from $$$u_i$$$ to $$$v_i$$$) and its weight ($$$c_i$$$).
The next $$$q$$$ lines contain the queries, one query per line. The $$$i$$$-th line contains $$$+\;v_i$$$, if it is a query of the first type, and $$$-\;v_i$$$, if it is a query of the second type ($$$1 \leq v_i \leq n$$$).
Output
Output $$$q$$$ numbers. The $$$i$$$-th number is the cost of the graph after the first $$$i$$$ queries.
Examples
Input
4 5 6
1 2 1
2 3 5
3 2 3
4 1 8
2 1 4
+ 1
- 1
+ 3
+ 1
+ 4
+ 2
Output
15
-1
14
12
4
0
Input
10 14 10
8 6 4
2 5 1
3 5 4
1 6 3
1 3 7
7 2 1
6 1 3
4 10 1
4 6 5
5 4 1
5 8 10
10 9 1
9 5 1
9 7 6
+ 7
+ 8
- 7
+ 10
+ 2
- 10
+ 5
- 2
- 5
+ 3
Output
28
24
29
19
18
24
18
19
29
20
----------------------------------------------------------------------------------------------------
